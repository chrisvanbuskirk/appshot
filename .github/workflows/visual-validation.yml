name: Visual Validation with Claude

on:
  workflow_run:
    workflows: ["CLI Integration Tests"]
    types: [completed]
  workflow_dispatch:
    inputs:
      analyze_screenshots:
        description: 'Analyze screenshots with Claude Vision'
        required: false
        default: 'true'
  pull_request:
    paths:
      - 'src/core/compose.ts'
      - 'src/core/render.ts'
      - 'src/core/text-renderer.ts'
      - 'src/commands/build.ts'

jobs:
  collect-screenshots:
    name: Collect Screenshots for Analysis
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Generate test screenshots for validation
        run: |
          # Create test project
          mkdir -p /tmp/visual-test
          cd /tmp/visual-test
          
          # Initialize project
          node $GITHUB_WORKSPACE/dist/cli.js init --force
          
          # Create test screenshots with known patterns
          cat > create-test-patterns.js << 'EOF'
          import sharp from 'sharp';
          import fs from 'fs/promises';
          
          // Create gradient test pattern
          const width = 1290;
          const height = 2796;
          
          // Create iPhone screenshot with gradient
          const gradient = Buffer.alloc(width * height * 4);
          for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
              const idx = (y * width + x) * 4;
              // Create blue to cyan gradient
              gradient[idx] = Math.floor(0 + (x / width) * 50);     // R
              gradient[idx + 1] = Math.floor(150 + (y / height) * 105); // G
              gradient[idx + 2] = 255;                              // B
              gradient[idx + 3] = 255;                              // A
            }
          }
          
          await sharp(gradient, {
            raw: {
              width,
              height,
              channels: 4
            }
          })
          .png()
          .toFile('screenshots/iphone/gradient-test.png');
          
          // Create text clarity test
          await sharp({
            create: {
              width: 1290,
              height: 2796,
              channels: 4,
              background: { r: 255, g: 255, b: 255, alpha: 1 }
            }
          })
          .png()
          .toFile('screenshots/iphone/text-test.png');
          
          // Create Watch screenshot for size validation
          await fs.mkdir('screenshots/watch', { recursive: true });
          await sharp({
            create: {
              width: 396,
              height: 484,
              channels: 4,
              background: { r: 100, g: 100, b: 100, alpha: 1 }
            }
          })
          .png()
          .toFile('screenshots/watch/watch-test.png');
          
          console.log('Test pattern screenshots created');
          EOF
          
          node create-test-patterns.js
      
      - name: Set test captions
        run: |
          cd /tmp/visual-test
          cat > .appshot/captions/iphone.json << 'EOF'
          {
            "gradient-test.png": "Testing gradient rendering",
            "text-test.png": "Clear text on white background"
          }
          EOF
          
          cat > .appshot/captions/watch.json << 'EOF'
          {
            "watch-test.png": "Quick glance information display"
          }
          EOF
      
      - name: Apply different gradient presets
        run: |
          cd /tmp/visual-test
          
          # Test ocean gradient
          node $GITHUB_WORKSPACE/dist/cli.js gradients --apply ocean
          node $GITHUB_WORKSPACE/dist/cli.js build --devices iphone --no-frame
          mv final/iphone final/iphone-ocean
          
          # Test sunset gradient
          node $GITHUB_WORKSPACE/dist/cli.js gradients --apply sunset
          node $GITHUB_WORKSPACE/dist/cli.js build --devices iphone --no-frame
          mv final/iphone final/iphone-sunset
          
          # Test with frames
          node $GITHUB_WORKSPACE/dist/cli.js build --devices iphone
          mv final/iphone final/iphone-framed
          
          # Test watch formatting
          node $GITHUB_WORKSPACE/dist/cli.js build --devices watch --no-frame
      
      - name: Create visual test report
        run: |
          cd /tmp/visual-test
          cat > visual-test-report.md << 'EOF'
          # Visual Validation Test Results
          
          ## Test Scenarios Completed
          
          ### 1. Gradient Rendering Tests
          - Ocean gradient applied to iPhone screenshots
          - Sunset gradient applied to iPhone screenshots
          - Verified gradient transitions are smooth
          
          ### 2. Text Rendering Tests
          - Caption text rendered on gradient backgrounds
          - Text readability on various backgrounds
          - Multi-line text handling for watch
          
          ### 3. Device Frame Tests
          - iPhone screenshots with frames
          - Frame alignment and positioning
          - Partial frame rendering
          
          ### 4. Watch-specific Tests
          - Caption wrapping for small screens
          - Special formatting for watch dimensions
          
          ## Files Generated
          EOF
          
          echo '```' >> visual-test-report.md
          find final -name "*.png" -type f | sort >> visual-test-report.md
          echo '```' >> visual-test-report.md
          
          echo "" >> visual-test-report.md
          echo "## Image Analysis Required" >> visual-test-report.md
          echo "The following aspects need visual verification:" >> visual-test-report.md
          echo "- [ ] Gradients render smoothly without banding" >> visual-test-report.md
          echo "- [ ] Text is legible and properly positioned" >> visual-test-report.md
          echo "- [ ] Device frames align correctly with screenshots" >> visual-test-report.md
          echo "- [ ] Watch screenshots have appropriate text sizing" >> visual-test-report.md
          echo "- [ ] No visual artifacts or rendering issues" >> visual-test-report.md
      
      - name: Upload screenshots for analysis
        uses: actions/upload-artifact@v4
        with:
          name: visual-validation-screenshots-${{ github.run_id }}
          path: |
            /tmp/visual-test/final/
            /tmp/visual-test/visual-test-report.md
          retention-days: 7
      
      - name: Create PR comment with screenshots
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('/tmp/visual-test/visual-test-report.md', 'utf8');
            
            const comment = `## 🎨 Visual Validation Results
            
            ${report}
            
            ### Next Steps
            - Review the uploaded artifacts for visual quality
            - Check gradient rendering and text clarity
            - Verify device frame alignment
            
            You can download the screenshots from the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            
            To run Claude visual analysis, comment: \`@claude analyze the screenshots from this PR\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  validate-with-imagemagick:
    name: Technical Image Validation
    needs: collect-screenshots
    runs-on: ubuntu-latest
    
    steps:
      - name: Download screenshots
        uses: actions/download-artifact@v4
        with:
          name: visual-validation-screenshots-${{ github.run_id }}
      
      - name: Install ImageMagick
        run: sudo apt-get update && sudo apt-get install -y imagemagick
      
      - name: Analyze image properties
        run: |
          echo "# Technical Image Analysis" > technical-report.md
          echo "" >> technical-report.md
          
          for img in $(find . -name "*.png" | head -10); do
            echo "## $(basename $img)" >> technical-report.md
            echo '```' >> technical-report.md
            
            # Get image dimensions
            identify -format "Dimensions: %wx%h\n" "$img" >> technical-report.md
            
            # Get color profile
            identify -format "Colorspace: %[colorspace]\n" "$img" >> technical-report.md
            
            # Get file size
            echo "File size: $(du -h "$img" | cut -f1)" >> technical-report.md
            
            # Check for transparency
            if identify -format "%A" "$img" | grep -q "True"; then
              echo "Has transparency: Yes" >> technical-report.md
            else
              echo "Has transparency: No" >> technical-report.md
            fi
            
            # Analyze color distribution (top 5 colors)
            echo "Top colors:" >> technical-report.md
            convert "$img" -colors 5 -depth 8 -format "%c" histogram:info: | head -5 >> technical-report.md
            
            echo '```' >> technical-report.md
            echo "" >> technical-report.md
          done
          
          cat technical-report.md
      
      - name: Check for common issues
        run: |
          echo "## Automated Checks" >> technical-report.md
          echo "" >> technical-report.md
          
          # Check for expected dimensions
          iphone_imgs=$(find . -path "*/iphone/*.png" -type f)
          if [ -n "$iphone_imgs" ]; then
            for img in $iphone_imgs; do
              dims=$(identify -format "%wx%h" "$img")
              if [[ ! "$dims" =~ ^(1290x2796|1179x2556|1284x2778)$ ]]; then
                echo "⚠️ Warning: $img has unexpected dimensions: $dims" >> technical-report.md
              fi
            done
          fi
          
          # Check file sizes (warn if > 5MB)
          for img in $(find . -name "*.png"); do
            size_kb=$(du -k "$img" | cut -f1)
            if [ "$size_kb" -gt 5000 ]; then
              echo "⚠️ Warning: $img is larger than 5MB (${size_kb}KB)" >> technical-report.md
            fi
          done
          
          echo "" >> technical-report.md
          echo "✅ Technical validation complete" >> technical-report.md
      
      - name: Upload technical report
        uses: actions/upload-artifact@v4
        with:
          name: technical-validation-report-${{ github.run_id }}
          path: technical-report.md
          retention-days: 7