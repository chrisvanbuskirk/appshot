name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Prevent duplicate runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Quick lint and type check (unchanged)
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript check
        run: npm run typecheck
      
      - name: Run linter
        run: npm run lint

  # Fast unit tests across all platforms
  unit-tests:
    name: Unit Tests
    needs: lint-and-typecheck
    uses: ./.github/workflows/ci-unit.yml

  # Integration tests (fewer platforms, one Node version)
  integration-tests:
    name: Integration Tests
    needs: lint-and-typecheck
    uses: ./.github/workflows/ci-integration.yml

  # Visual tests (macOS only for pixel-perfect validation)
  visual-tests:
    name: Visual Tests
    needs: lint-and-typecheck
    if: |
      github.event_name == 'pull_request' || 
      github.ref == 'refs/heads/main' ||
      contains(github.event.head_commit.message, '[visual]')
    uses: ./.github/workflows/ci-visual.yml

  # Status check for branch protection
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "❌ CI Failed"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "Integration Tests: ${{ needs.integration-tests.result }}"
            exit 1
          else
            echo "✅ CI Passed"
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "Integration Tests: ${{ needs.integration-tests.result }}"
          fi

  # Performance metrics (optional)
  ci-metrics:
    name: CI Metrics
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, visual-tests]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Calculate CI time
        run: |
          echo "## CI Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Visual Tests | ${{ needs.visual-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Optimizations Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Font scanning disabled on Linux (APPSHOT_DISABLE_FONT_SCAN)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Visual tests run on macOS only" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integration tests skip Windows" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel execution of test suites" >> $GITHUB_STEP_SUMMARY

  # Bundle size check for PRs
  bundle-size:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
      
      - name: Check bundle size
        run: |
          echo "## 📦 Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Total dist size:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          du -sh dist/ >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "File sizes:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -exec du -h {} \; | sort -h >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Release job for main branch
  release:
    name: Release
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write  # Required for creating releases
      packages: write  # Required for publishing packages
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - run: npm ci
      
      - run: npm run build
      
      - name: Check if version changed
        id: version
        uses: EndBug/version-check@v2
        with:
          diff-search: true
      
      - name: Publish to npm
        if: steps.version.outputs.changed == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        if: steps.version.outputs.changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          generate_release_notes: true