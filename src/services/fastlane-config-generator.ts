/**
 * Generate a Deliverfile for Fastlane
 */
export function generateDeliverfile(
  languages: string[],
  screenshotsPath: string = './screenshots'
): string {
  const timestamp = new Date().toISOString();

  return `# Generated by appshot export
# ${timestamp}

# Screenshot configuration
screenshots_path "${screenshotsPath}"
overwrite_screenshots true

# Languages to process
languages([
  ${languages.map(l => `'${l}'`).join(',\n  ')}
])

# Skip other deliverables (screenshots only)
skip_metadata true
skip_binary_upload true
skip_app_version_update true

# Submission configuration
submit_for_review false
automatic_release false
phased_release false

# Optional: Add your app configuration
# app_identifier "com.example.app"
# team_id "YOUR_TEAM_ID"

# Optional: Authentication
# You can use App Store Connect API keys:
# app_store_connect_api_key(
#   key_id: "YOUR_KEY_ID",
#   issuer_id: "YOUR_ISSUER_ID",
#   key_filepath: "./AuthKey_YOUR_KEY_ID.p8"
# )
`;
}

/**
 * Generate a Fastlane lane for appshot integration
 */
export function generateFastfileLane(): string {
  return `# Add these lanes to your Fastfile for appshot integration
# Generated by appshot export

desc "Generate and upload screenshots using appshot"
lane :screenshots do
  # Ensure we're in the right directory
  ensure_git_status_clean

  # Generate screenshots with appshot
  UI.message "Generating screenshots with appshot..."
  sh "cd .. && appshot build --preset iphone-6-9,ipad-13"

  # Export to Fastlane structure
  UI.message "Exporting screenshots for Fastlane..."
  sh "cd .. && appshot export fastlane --clean"

  # Upload to App Store Connect
  UI.message "Uploading screenshots to App Store Connect..."
  deliver(
    screenshots_path: "./screenshots",
    overwrite_screenshots: true,
    skip_metadata: true,
    skip_binary_upload: true,
    force: true, # Skip HTML preview

    # Optional: specify app if not in Deliverfile
    # app_identifier: "com.example.app"
  )

  UI.success "Screenshots uploaded successfully!"
end

desc "Generate screenshots only (no upload)"
lane :generate_screenshots do
  # Generate screenshots with appshot
  UI.message "Generating screenshots with appshot..."
  sh "cd .. && appshot build --preset iphone-6-9,ipad-13"

  # Export to Fastlane structure
  UI.message "Exporting screenshots for Fastlane..."
  sh "cd .. && appshot export fastlane --clean"

  UI.success "Screenshots ready in fastlane/screenshots/"
  UI.message "Run 'fastlane deliver' to upload when ready"
end

desc "Validate screenshots before upload"
lane :validate_screenshots do
  # Generate and export screenshots
  sh "cd .. && appshot build --preset iphone-6-9,ipad-13 --dry-run"
  sh "cd .. && appshot export fastlane --dry-run"

  # Validate with deliver
  deliver(
    screenshots_path: "./screenshots",
    skip_metadata: true,
    skip_binary_upload: true,
    verify_only: true # Only validate, don't upload
  )

  UI.success "Screenshots validated successfully!"
end

desc "Download current screenshots from App Store Connect"
lane :download_screenshots do
  # Download current screenshots
  deliver(
    screenshots_path: "./screenshots_backup",
    download_screenshots: true,
    skip_metadata: true,
    skip_binary_upload: true
  )

  UI.success "Current screenshots downloaded to ./screenshots_backup/"
end

# Alternative upload method using staging to handle nested directories
# Use this if the standard upload fails with nested directories
desc "Upload screenshots using staging approach (handles nested dirs)"
lane :upload_screenshots_staged do
  require 'fileutils'

  UI.message "Preparing screenshots with staging approach..."

  source_root = File.expand_path("screenshots", __dir__)
  staging_root = File.expand_path("screenshots_staging", __dir__)

  # Clean staging directory
  FileUtils.rm_rf(staging_root)
  FileUtils.mkdir_p(staging_root)

  # Process each language directory
  Dir.glob(File.join(source_root, "*")).each do |language_dir|
    next unless File.directory?(language_dir)

    language = File.basename(language_dir)
    dest_language_dir = File.join(staging_root, language)
    FileUtils.mkdir_p(dest_language_dir)

    # Flatten nested structure (device/screenshot.png -> device__screenshot.png)
    Dir.glob(File.join(language_dir, '**', '*.{png,jpg,jpeg}')).each do |image_path|
      rel = Pathname.new(image_path).relative_path_from(Pathname.new(language_dir)).to_s

      # Replace directory separators with double underscores
      sanitized = rel.gsub(File::SEPARATOR, '__')

      FileUtils.cp(image_path, File.join(dest_language_dir, sanitized))
    end
  end

  UI.message "Uploading screenshots from staging directory..."

  deliver(
    screenshots_path: staging_root,
    overwrite_screenshots: true,
    skip_metadata: true,
    skip_binary_upload: true,
    force: true
  )

  # Clean up staging
  FileUtils.rm_rf(staging_root)

  UI.success "Screenshots uploaded successfully using staging approach!"
end

# Helper lane to set up App Store Connect API authentication
desc "Configure App Store Connect API authentication"
private_lane :setup_app_store_connect_api do
  app_store_connect_api_key(
    key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
    issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
    key_filepath: ENV["APP_STORE_CONNECT_KEY_FILEPATH"] || "./AuthKey.p8",

    # Optional parameters
    duration: 1200, # 20 minutes (max allowed)
    in_house: false # Set to true for Enterprise accounts
  )
end
`;
}

/**
 * Generate a README for Fastlane integration
 */
export function generateFastlaneReadme(languages: string[]): string {
  return `# Fastlane Integration for AppShot

This directory contains the Fastlane configuration for uploading screenshots generated by AppShot to App Store Connect.

## Setup

### 1. Install Fastlane

\`\`\`bash
# Using RubyGems
gem install fastlane

# Or using Homebrew (macOS)
brew install fastlane
\`\`\`

### 2. App Store Connect API Key

1. Go to [App Store Connect](https://appstoreconnect.apple.com)
2. Navigate to Users and Access → Keys
3. Create a new API key with "App Manager" role
4. Download the .p8 key file (can only be downloaded once!)
5. Note your Issuer ID and Key ID

### 3. Configure Authentication

Set environment variables in your shell profile or CI/CD:

\`\`\`bash
export APP_STORE_CONNECT_KEY_ID="YOUR_KEY_ID"
export APP_STORE_CONNECT_ISSUER_ID="YOUR_ISSUER_ID"
export APP_STORE_CONNECT_KEY_FILEPATH="./AuthKey.p8"
\`\`\`

Or add to \`Deliverfile\`:

\`\`\`ruby
app_store_connect_api_key(
  key_id: "YOUR_KEY_ID",
  issuer_id: "YOUR_ISSUER_ID",
  key_filepath: "./AuthKey.p8"
)
\`\`\`

## Usage

### Generate and Upload Screenshots

\`\`\`bash
# Full workflow
fastlane screenshots

# Generate only (no upload)
fastlane generate_screenshots

# Validate before upload
fastlane validate_screenshots

# Download existing screenshots
fastlane download_screenshots
\`\`\`

### Manual Steps

\`\`\`bash
# 1. Generate screenshots with AppShot
appshot build --preset iphone-6-9,ipad-13

# 2. Export for Fastlane
appshot export fastlane --clean

# 3. Upload to App Store Connect
fastlane deliver
\`\`\`

## Supported Languages

The following languages are configured for upload:
${languages.map(l => `- ${l}`).join('\n')}

## Directory Structure

\`\`\`
fastlane/
├── Deliverfile          # Delivery configuration
├── Fastfile             # Lane definitions
├── README.md            # This file
└── screenshots/         # Exported screenshots
    ├── ${languages[0] || 'en-US'}/
    │   ├── iPhone_*.png
    │   ├── iPad_*.png
    │   └── ...
    └── ${languages[1] || 'es-ES'}/
        └── ...
\`\`\`

## Troubleshooting

### Missing Screenshots
- Ensure \`appshot build\` completed successfully
- Check that \`appshot export\` created the screenshots directory
- Verify language codes match App Store Connect settings

### Authentication Errors
- Verify API key permissions (needs "App Manager" role)
- Check key file path is correct
- Ensure key hasn't expired

### Upload Failures
- Verify image dimensions match App Store requirements
- Check that all required device types are present
- Ensure network connectivity to App Store Connect

## Additional Resources

- [Fastlane Documentation](https://docs.fastlane.tools)
- [App Store Screenshot Specifications](https://developer.apple.com/help/app-store-connect/reference/screenshot-specifications)
- [AppShot Documentation](https://github.com/chrisvanbuskirk/appshot)
`;
}

/**
 * Generate a .gitignore for Fastlane directory
 */
export function generateFastlaneGitignore(): string {
  return `# Fastlane
report.xml
Preview.html
screenshots/
screenshots_backup/

# App Store Connect API Keys
*.p8
AuthKey_*.p8

# Environment variables
.env
.env.local

# Temporary files
*.tmp
.DS_Store
Thumbs.db

# Build artifacts
build/
DerivedData/

# Fastlane specific
fastlane/report.xml
fastlane/Preview.html
fastlane/test_output/
`;
}