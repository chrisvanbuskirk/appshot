import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import {
  generateDeliverfile,
  generateFastfileLane,
  generateFastlaneReadme,
  generateFastlaneGitignore
} from '../src/services/fastlane-config-generator.js';

describe('fastlane-config-generator', () => {
  beforeEach(() => {
    vi.useFakeTimers();
    vi.setSystemTime(new Date('2024-01-02T03:04:05.000Z'));
  });

  afterEach(() => {
    vi.useRealTimers();
  });

  it('generates Deliverfile with languages and path', () => {
    const output = generateDeliverfile(['en-US', 'es-ES'], '../screens');
    expect(output).toMatchInlineSnapshot(`"# Generated by appshot export\n# 2024-01-02T03:04:05.000Z\n\n# Screenshot configuration\nscreenshots_path \"../screens\"\noverwrite_screenshots true\n\n# Languages to process\nlanguages([\n  'en-US',\n  'es-ES'\n])\n\n# Skip other deliverables (screenshots only)\nskip_metadata true\nskip_binary_upload true\nskip_app_version_update true\n\n# Submission configuration\nsubmit_for_review false\nautomatic_release false\nphased_release false\n\n# Optional: Add your app configuration\n# app_identifier \"com.example.app\"\n# team_id \"YOUR_TEAM_ID\"\n\n# Optional: Authentication\n# You can use App Store Connect API keys:\n# app_store_connect_api_key(\n#   key_id: \"YOUR_KEY_ID\",\n#   issuer_id: \"YOUR_ISSUER_ID\",\n#   key_filepath: \"./AuthKey_YOUR_KEY_ID.p8\"\n# )\n"`);
  });

  it('generates Fastfile lanes snippet', () => {
    const output = generateFastfileLane();
    expect(output).toMatchInlineSnapshot(`"# Add these lanes to your Fastfile for appshot integration\n# Generated by appshot export\n\ndesc \"Generate and upload screenshots using appshot\"\nlane :screenshots do\n  # Ensure we're in the right directory\n  ensure_git_status_clean\n\n  # Generate screenshots with appshot\n  UI.message \"Generating screenshots with appshot...\"\n  sh \"cd .. && appshot build --preset iphone-6-9,ipad-13\"\n\n  # Export to Fastlane structure\n  UI.message \"Exporting screenshots for Fastlane...\"\n  sh \"cd .. && appshot export fastlane --clean\"\n\n  # Upload to App Store Connect\n  UI.message \"Uploading screenshots to App Store Connect...\"\n  deliver(\n    screenshots_path: \"./screenshots\",\n    overwrite_screenshots: true,\n    skip_metadata: true,\n    skip_binary_upload: true,\n    force: true, # Skip HTML preview\n\n    # Optional: specify app if not in Deliverfile\n    # app_identifier: \"com.example.app\"\n  )\n\n  UI.success \"Screenshots uploaded successfully!\"\nend\n\ndesc \"Generate screenshots only (no upload)\"\nlane :generate_screenshots do\n  # Generate screenshots with appshot\n  UI.message \"Generating screenshots with appshot...\"\n  sh \"cd .. && appshot build --preset iphone-6-9,ipad-13\"\n\n  # Export to Fastlane structure\n  UI.message \"Exporting screenshots for Fastlane...\"\n  sh \"cd .. && appshot export fastlane --clean\"\n\n  UI.success \"Screenshots ready in fastlane/screenshots/\"\n  UI.message \"Run 'fastlane deliver' to upload when ready\"\nend\n\ndesc \"Validate screenshots before upload\"\nlane :validate_screenshots do\n  # Generate and export screenshots\n  sh \"cd .. && appshot build --preset iphone-6-9,ipad-13 --dry-run\"\n  sh \"cd .. && appshot export fastlane --dry-run\"\n\n  # Validate with deliver\n  deliver(\n    screenshots_path: \"./screenshots\",\n    skip_metadata: true,\n    skip_binary_upload: true,\n    verify_only: true # Only validate, don't upload\n  )\n\n  UI.success \"Screenshots validated successfully!\"\nend\n\ndesc \"Download current screenshots from App Store Connect\"\nlane :download_screenshots do\n  # Download current screenshots\n  deliver(\n    screenshots_path: \"./screenshots_backup\",\n    download_screenshots: true,\n    skip_metadata: true,\n    skip_binary_upload: true\n  )\n\n  UI.success \"Current screenshots downloaded to ./screenshots_backup/\"\nend\n\n# Helper lane to set up App Store Connect API authentication\ndesc \"Configure App Store Connect API authentication\"\nprivate_lane :setup_app_store_connect_api do\n  app_store_connect_api_key(\n    key_id: ENV[\"APP_STORE_CONNECT_KEY_ID\"],\n    issuer_id: ENV[\"APP_STORE_CONNECT_ISSUER_ID\"],\n    key_filepath: ENV[\"APP_STORE_CONNECT_KEY_FILEPATH\"] || \"./AuthKey.p8\",\n\n    # Optional parameters\n    duration: 1200, # 20 minutes (max allowed)\n    in_house: false # Set to true for Enterprise accounts\n  )\nend\n"`);
  });

  it('lists selected languages in README', () => {
    const output = generateFastlaneReadme(['en-US', 'ja']);
    expect(output).toContain('- en-US');
    expect(output).toContain('- ja');
    expect(output).toContain('fastlane/');
    expect(output).toContain('└── screenshots/');
  });

  it('.gitignore includes Fastlane artifacts', () => {
    const output = generateFastlaneGitignore();
    expect(output).toContain('fastlane/report.xml');
    expect(output).toContain('screenshots/');
    expect(output).toContain('AuthKey_*.p8');
  });
});
