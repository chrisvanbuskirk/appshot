import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import {
  generateDeliverfile,
  generateFastfileLane,
  generateFastlaneReadme,
  generateFastlaneGitignore
} from '../src/services/fastlane-config-generator.js';

describe('fastlane-config-generator', () => {
  beforeEach(() => {
    vi.useFakeTimers();
    vi.setSystemTime(new Date('2024-01-02T03:04:05.000Z'));
  });

  afterEach(() => {
    vi.useRealTimers();
  });

  it('generates Deliverfile with languages and path', () => {
    const output = generateDeliverfile(['en-US', 'es-ES'], '../screens');
    expect(output).toMatchInlineSnapshot(`"# Generated by appshot export\n# 2024-01-02T03:04:05.000Z\n\n# Screenshot configuration\nscreenshots_path \"../screens\"\noverwrite_screenshots true\n\n# Languages to process\nlanguages([\n  'en-US',\n  'es-ES'\n])\n\n# Skip other deliverables (screenshots only)\nskip_metadata true\nskip_binary_upload true\nskip_app_version_update true\n\n# Submission configuration\nsubmit_for_review false\nautomatic_release false\nphased_release false\n\n# Optional: Add your app configuration\n# app_identifier \"com.example.app\"\n# team_id \"YOUR_TEAM_ID\"\n\n# Optional: Authentication\n# You can use App Store Connect API keys:\n# app_store_connect_api_key(\n#   key_id: \"YOUR_KEY_ID\",\n#   issuer_id: \"YOUR_ISSUER_ID\",\n#   key_filepath: \"./AuthKey_YOUR_KEY_ID.p8\"\n# )\n"`);
  });

  it('generates Fastfile lanes snippet', () => {
    const output = generateFastfileLane();
    expect(output).toMatchInlineSnapshot(`
      "# Add these lanes to your Fastfile for appshot integration
      # Generated by appshot export

      desc "Generate and upload screenshots using appshot"
      lane :screenshots do
        # Ensure we're in the right directory
        ensure_git_status_clean

        # Generate screenshots with appshot
        UI.message "Generating screenshots with appshot..."
        sh "cd .. && appshot build --preset iphone-6-9,ipad-13"

        # Export to Fastlane structure
        UI.message "Exporting screenshots for Fastlane..."
        sh "cd .. && appshot export fastlane --clean"

        # Upload to App Store Connect
        UI.message "Uploading screenshots to App Store Connect..."
        deliver(
          screenshots_path: "./screenshots",
          overwrite_screenshots: true,
          skip_metadata: true,
          skip_binary_upload: true,
          force: true, # Skip HTML preview

          # Optional: specify app if not in Deliverfile
          # app_identifier: "com.example.app"
        )

        UI.success "Screenshots uploaded successfully!"
      end

      desc "Generate screenshots only (no upload)"
      lane :generate_screenshots do
        # Generate screenshots with appshot
        UI.message "Generating screenshots with appshot..."
        sh "cd .. && appshot build --preset iphone-6-9,ipad-13"

        # Export to Fastlane structure
        UI.message "Exporting screenshots for Fastlane..."
        sh "cd .. && appshot export fastlane --clean"

        UI.success "Screenshots ready in fastlane/screenshots/"
        UI.message "Run 'fastlane deliver' to upload when ready"
      end

      desc "Validate screenshots before upload"
      lane :validate_screenshots do
        # Generate and export screenshots
        sh "cd .. && appshot build --preset iphone-6-9,ipad-13 --dry-run"
        sh "cd .. && appshot export fastlane --dry-run"

        # Validate with deliver
        deliver(
          screenshots_path: "./screenshots",
          skip_metadata: true,
          skip_binary_upload: true,
          verify_only: true # Only validate, don't upload
        )

        UI.success "Screenshots validated successfully!"
      end

      desc "Download current screenshots from App Store Connect"
      lane :download_screenshots do
        # Download current screenshots
        deliver(
          screenshots_path: "./screenshots_backup",
          download_screenshots: true,
          skip_metadata: true,
          skip_binary_upload: true
        )

        UI.success "Current screenshots downloaded to ./screenshots_backup/"
      end

      # Alternative upload method using staging to handle nested directories
      # Use this if the standard upload fails with nested directories
      desc "Upload screenshots using staging approach (handles nested dirs)"
      lane :upload_screenshots_staged do
        require 'fileutils'

        UI.message "Preparing screenshots with staging approach..."

        source_root = File.expand_path("screenshots", __dir__)
        staging_root = File.expand_path("screenshots_staging", __dir__)

        # Clean staging directory
        FileUtils.rm_rf(staging_root)
        FileUtils.mkdir_p(staging_root)

        # Process each language directory
        Dir.glob(File.join(source_root, "*")).each do |language_dir|
          next unless File.directory?(language_dir)

          language = File.basename(language_dir)
          dest_language_dir = File.join(staging_root, language)
          FileUtils.mkdir_p(dest_language_dir)

          # Flatten nested structure (device/screenshot.png -> device__screenshot.png)
          Dir.glob(File.join(language_dir, '**', '*.{png,jpg,jpeg}')).each do |image_path|
            rel = Pathname.new(image_path).relative_path_from(Pathname.new(language_dir)).to_s

            # Replace directory separators with double underscores
            sanitized = rel.gsub(File::SEPARATOR, '__')

            FileUtils.cp(image_path, File.join(dest_language_dir, sanitized))
          end
        end

        UI.message "Uploading screenshots from staging directory..."

        deliver(
          screenshots_path: staging_root,
          overwrite_screenshots: true,
          skip_metadata: true,
          skip_binary_upload: true,
          force: true
        )

        # Clean up staging
        FileUtils.rm_rf(staging_root)

        UI.success "Screenshots uploaded successfully using staging approach!"
      end

      # Helper lane to set up App Store Connect API authentication
      desc "Configure App Store Connect API authentication"
      private_lane :setup_app_store_connect_api do
        app_store_connect_api_key(
          key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
          issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
          key_filepath: ENV["APP_STORE_CONNECT_KEY_FILEPATH"] || "./AuthKey.p8",

          # Optional parameters
          duration: 1200, # 20 minutes (max allowed)
          in_house: false # Set to true for Enterprise accounts
        )
      end
      "
    `);
  });

  it('lists selected languages in README', () => {
    const output = generateFastlaneReadme(['en-US', 'ja']);
    expect(output).toContain('- en-US');
    expect(output).toContain('- ja');
    expect(output).toContain('fastlane/');
    expect(output).toContain('└── screenshots/');
  });

  it('.gitignore includes Fastlane artifacts', () => {
    const output = generateFastlaneGitignore();
    expect(output).toContain('fastlane/report.xml');
    expect(output).toContain('screenshots/');
    expect(output).toContain('AuthKey_*.p8');
  });
});
